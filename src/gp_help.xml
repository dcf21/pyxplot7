<?xml version="1.0"?>
<help>

Welcome to the PyXPlot help system. The 'help' command provides an
easily-navigable source of information which is supplementary to that in the
Users' Guide. To obtain information on any particular topic, type 'help'
followed by the name of the topic. For example:

help commands

provides information on PyXPlot's commands. Some topics have subtopics, this
being one example; these are listed at the end of each help page. To view them,
add further words to the end of your help request -- an example might be:

help commands help

Information is arranged with general information about PyXPlot under the
heading 'about', and information about PyXPlot's commands under 'commands'.
Information about the format that input datafiles should take can be found
under 'datafile'. Other categories, listed below, are self-explanatory.

To exit any help page, press the 'Q' key.

 <authors>

Dominic Ford \\
Ross Church \\
email: \labcoders@pyxplot.org.uk\rab

 </authors>
 <credits>

The author would like to express his gratitude to Joerg Lehmann and Andre Wobst
for writing the PyX graphics library for python, upon which this software is
heavily built, as well as to Ross Church for his many useful comments and
suggestions during its development.

 </credits>
 <version>

This is PyXPlot version $VERSION.

 </version>
 <datafile>

PyXPlot expects its input datafiles to be in plain text format, with columns of
data separated either by whitespace or by commas. This means that PyXPlot is
compatible both with the format of datafiles read by gnuplot, and also with
Comma Separated Values (CSV) format, which many spreadsheets are able to
produce.

The subsections below provide some details of the modifiers that can follow the
plot command when working with data files to select which parts of the file
should be used. They also apply equally to the spline and fit commands, which
also take input from data files.

   <using>

The using specifier allows one to choose which columns of a data file to use.
For example:

plot 'data' using 2:5 with points

will plot data from the file drawing the x-positions of each datapoint from the
second column of the data file, and the y-positions from the fourth.

    <rows>

The rows modifier causes the data file to be considered as a set of rows rather
than columns. For example:

plot 'data' using rows 2:5 with points

would plot data from the file drawing the x-positions of each datapoint from
the second row of the data file, and the y-positions from the fourth.

    </rows>
   </using>
   <every>

When PyXPlot reads a datafile, it looks for any blank lines in the file. It
divides the datafile up into "data blocks", each being separated by single
blank lines. The first datablock is numbered 0, the next 1, and so on.

When two or more blank lines are found together, the datafile is divided up
into "index blocks". Each index block may be made up of a series of data 
blocks. To clarify this, a labelled example datafile is shown below:

|#0.0###0.0#######Start#of#index#0,#data#block#0. \\
|#1.0###1.0###### \\
|#2.0###2.0###### \\
|#3.0###3.0###### \\
|#################A#single#blank#line#marks#the#start#of#a#new#data#block. \\
|#0.0###5.0#######Start#of#index#0,#data#block#1. \\
|#1.0###4.0###### \\
|#2.0###2.0###### \\
|#################A#double#blank#line#marks#the#start#of#a#new#index. \\
|#################... \\
|#0.0###1.0#######Start#of#index#1,#data#block#0. \\
|#1.0###1.0###### \\
|#################A#single#blank#line#marks#the#start#of#a#new#data#block. \\
|#0.0###5.0#######Start#of#index#1,#data#block#1. \\
|#################...etc...

The every modifier chooses which lines and data blocks of a datafile to take
data from. It has syntax

plot 'datafile' every a:b:c:d:e:f

where the letters have the following meanings:

a Plot data only from every a th line in datafile.

b Plot only data from every b th block within each index block.

c Plot only from line c onwards within each block.

d Plot only data from block d onwards within each index block.

e Plot only up to the e th line within each block.

f Plot only up to the f th block within each index block.

To select which index blocks to take data from, see the "index" modifier.

   </every>
   <index>

When PyXPlot reads a datafile, it looks for any blank lines in the file. When
two or more are found together, the datafile is divided up into large blocks
called "index blocks".  The index blocks are numbered from the start of the
file, the first being numbered zero.

The index specifier selects an index block from a data set to plot data from.
For example:

plot 'data' index 1

will plot the data from the second index block only. A negative block number
will achieve the default option of plotting from all index blocks.

For more information on the divisions of datafiles see the "every" modifier.

   </index>
   <select>

The select modifier can be used to take only those datapoints from a datafile
which satisfy some criterion. For example:

plot 'datafile' select ($3>50)

would select from the file 'datafile' only those datapoints for which the value
in the third column of the file was greater than fifty.

Multiple select criteria can be specified; the following two statements would
be entirely equivalent:

plot sin(x) select (($1>0)and($2>0)) \\
plot sin(x) select ($1>0) select ($2>0)

It should be noted, however, that whitespace is not permitted in select
criteria. The following would NOT be permitted:

plot 'datafile' select ($3 > 50)

The select modifier has many applications, including plotting two-dimensional
slices from three-dimensional datasets, and selecting certain subsets of
datapoints from a datafile for plotting.

   </select>
  
 </datafile>
 <date>

This version of PyXPlot was released on $DATE.

 </date>
 <license>

PyXPlot is distributed under the Gnu General Public License, Version 2. A copy
of this can be downloaded from: http://www.gnu.org/copyleft/gpl.html .

 </license>
 <commands>

This section of PyXPlot's help system provides specific help on each of its
commands. The following list of subtopics represents a complete list of
PyXPlot's commands:


  <questionmark>

? [\labhelp option\rab ... ]

The ? symbol is a shortcut to the help command. 

  </questionmark>
  <pling>

! \labshell command\rab
... `\labshell command\rab` ...

Shell commands can be executed from within PyXPlot by pre-fixing them with pling (!) characters, for example: 

!mkdir foo

As an alternative, back-quotes (`) can be used to substitute the output of a shell command into a PyXPlot command, for example: 

set xlabel `echo "'" ; ls ; echo "'"`

Note that back-quotes cannot be used inside quote characters, and so the following would not work: 

set xlabel '`ls`'

  </pling>
  <arrow>

arrow [from] \labx\rab, \laby\rab [to] \labx\rab, \laby\rab [with \laboption\rab ... ]

Arrows may be placed on multiplot pages independently of any plots using the arrow command, which has the syntax: 

arrow from x1,y1 to x2,y2

The arrow command may be followed by the with keyword to specify the style of the arrow. The style keywords which are accepted are nohead, head (default) or twohead, in addition to keywords such as colour, linewidth or linetype, which have the same syntax and meaning as in the plot command. An example would be: 

arrow from x1,y1 to x2,y2 with twohead linetype 2 colour blue

Arrows receive unique multiplot identification numbers which count sequentially from one, and which are output to the terminal after the arrow command is called. By reference to these numbers, they can be deleted and undeleted subsequently with the delete and undelete commands respectively. 

  </arrow>
  <cd>

cd \labdirectory\rab

PyXPlot's cd command is very similar to the shell cd command; it changes the current working directory. For example: 

cd foo

  </cd>
  <clear>

clear

In multiplot mode, the clear command removes all current plots, arrows and text objects from the working page. In single plot mode it is not especially useful; it removes the current plot to leave a blank page. The clear command should not be followed by any parameters. 

  </clear>
  <delete>

delete \labplot number\rab, ...

The delete command is part of the multiplot environment; it removes plots, arrows or text items from a multiplot page. The items to be deleted should be identified using a comma-separated list of their reference numbers. Reference numbers count sequentially from zero for the first item created on a multiplot page, and are displayed on the terminal when items are created. For example: 

delete 1,2,3

would remove item numbers 1, 2 and 3. Having been deleted, multiplot items can be restored using the undelete command. 

  </delete>
  <edit>

edit \labplot number\rab

The edit command is part of the multiplot environment; it allows one to modify the properties of any plot on a multiplot. The desired plot should be identified using the reference number which it was given when it was created using the plot command; it would have been displayed on the terminal at that time. For example, consider the following command sequence: 

edit 1
set textcolour red
replot

Here, the edit command is used to select the plot with reference number1. The set textcolour red command which follows then changes the settings of this plot, taking effect when the replot command is called. The edit command also has the effect of resetting all of PyXPlot's plot settings to those used to produce the chosen plot, and so in conjunction with the show command, can be used to inspect as well as modify the settings of any plot on a multiplot page. For example: 

edit 1
show textcolour

would show the text colour used in plot 1. Having issued the edit command, no further command needs to be issued to return to a state of adding plots to a multiplot rather than editing the existing plots; simply call the plot command rather than the replot command to do this. 

  </edit>
  <eps>

eps '\labfilename\rab' [at \labx\rab, \laby\rab] [rotate \labangle\rab] [width \labwidth\rab]
                 [height \labheight\rab]

The eps command inserts an image into the current multiplot from an encapsulated postscript (eps) file. The at modifier can be used to specify where the bottom-left corner of the image should be placed; if it is not, then the image is placed at the origin. The rotate modifier can be used to rotate the image by any angle, measured in degrees counter-clockwise. The width or height modifiers can be used to specify the width or height with which the image should be rendered; both should be specified in centimetres. If neither is specified then the image will be rendered with the native dimensions specified within the postscript. The eps command is often useful in multiplot mode, allowing postscript images to be combined with plots, text labels, etc. 

  </eps>
  <exec>

exec \labcommand\rab

The exec command can be used to execute PyXPlot commands contained within string variables. For example: 

terminal="eps"
exec "set terminal %s"%(terminal)

It can also be used to write obfuscated PyXPlot scripts. 

  </exec>
  <exit>

exit

The exit command can be used to quit PyXPlot. If multiple command files, or a mixture of command files and interactive sessions, were specified on PyXPlot's command line, then PyXPlot moves onto the next command-line item after receiving the exit command. PyXPlot may also be quit be pressing CTRL-D or via the quit command. In interactive mode, CTRL-C terminates the current command, if one is running. When running a script, CTRL-C terminates execution of it. 

  </exit>
  <fit>

fit [\labrange specifier\rab ...] \labfunction\rab '\labdatafile\rab'
    [index \labindex specifier\rab] [using \labusing specifier\rab]
    via \labvariable\rab[, \labvariable\rab, ...]

The fit command may be used to fit functional forms to data in files. A simple example might be: 

f(x) = a*x+b
fit f(x) 'data.dat' index 1 using 2:3 via a,b

The coefficients to be varied are listed after the via keyword; the modifiers index, every and using have the same meanings as in the plot command. This is useful for producing best-fit lines and also has applications for estimating the gradients of datasets. The syntax is essentially identical to that used by Gnuplot.

  </fit>
  <help>

help [\labtopic\rab [\labsub-topic\rab ... ] ]

The help command provides an hierachical source of information which is supplementary to that in the Users' Guide. To obtain information on any particular topic, type help followed by the name of the topic. For example: 

help commands

provides information on PyXPlot's commands. Some topics have sub-topics; these are listed at the end of each help page. To view them, add further words to the end of your help request - an example might be: 

help commands help

Information is arranged with general information about PyXPlot under the heading about and information about PyXPlot's commands under commands. Information about the format that input data files should take can be found under datafile. Other categories are self-explanatory. To exit any help page, press the q key. 

  </help>
  <histogram>

histogram [range specification] \labfunction name\rab '\labdatafile\rab' 
     [using \labusing specifier\rab] [select \labselect specifier\rab]
     [index \labindex specifier\rab] [every \labevery specifier\rab]
     [binwidth \labbin width\rab] [binorigin \labbin origin\rab]
     [bins (x1, x2, ...)]

The histogram command takes a data file and counts the number of points in various bins, producing a function the area under which is equal to the number of points for each bin. The width and starting position of the bins can be specified using the binwidth and binorigin modifiers, or a user-supplied set of bins can be used with the bins modifier. For example: 

histogram f() 'output.dat' u 2 binwidth 2

produces a function f(), which contains the the data in the second column of the output.dat file binned into bins of width 2. A range specifier can be used to restrict the set of data in the data file that is to be binned; for example: 

histogram [0:10] f() 'data.dat' bins (0,1,3,6,10)

would only bin data between0 and10, and would do so into the user-specified bins. 

  </histogram>
  <history>

history [\labN\rab]

The history command outputs the current command-line history to the terminal. The optional parameter, N, if supplied, causes only the first N lines to be printed. 

  </history>
  <jpeg>

jpeg '\labfilename\rab' [at \labx\rab, \laby\rab] [rotate \labangle\rab] [width \labwidth\rab]
                  [height \labheight\rab]

The jpeg command inserts an image into the current multiplot from a jpeg file in disk. The at modifier can be used to specify where the bottom-left corner of the image should be placed; if it is not, then the image is placed at the origin. The rotate modifier can be used to rotate the image by any angle, measured in degrees counter-clockwise. The width or height modifiers can be used to specify the width or height with which the image should be rendered; both should be specified in centimetres. If neither is specified then the image will be rendered with the native dimensions specified within the jpeg file (if any). The jpeg command is often useful in multiplot mode, allowing images to be combined with plots, text labels, etc. 

  </jpeg>
  <list>

list

The list command outputs a listing of all of the items on a multiplot, giving their reference numbers and the commands used to produce them. For example: 

pyxplot\rab list
#  ID | Command 
    0   plot f(x) 
d   1   text 'Figure 1: A plot of f(x)' 
    2   text 'Figure 1: A plot of $f(x)$' 

# Items marked 'd' are deleted 

In this example, the user has plotted a graph of f(x), and added a caption to it. The ID column lists the reference numbers of each multiplot item. Item 1 has been deleted, and this is indicated by the d to the left of its reference number. 

  </list>
  <load>

load '\labfilename\rab'

The load command executes a PyXPlot command script file, just as if its contents had been typed into the current terminal. For example: 

load 'foo'

would have the same effect as typing the contents of the file foo into the present session. Wildcards can be used in the load command, in which case all command files matching the given wildcard are executed, for example: 

load '*.script'

  </load>
  <move>

move \labplot number\rab to \labx\rab, \laby\rab

The move command is part of the multiplot environment; it can be used to move items around on a multiplot page. The item to be moved should be specified using the reference number which it was given when it was created; it would have been displayed on the terminal at that time. For example: 

move 23 to 8,8

This would move multiplot item23 to position (8,8) centimetres. If this item were a plot, the end result would be the same as if the command set origin 8,8 had been called before it had originally been plotted. 

  </move>
  <plot>

plot [\labrange specifier\rab ...] ('\labfilename\rab'|\labfunction\rab)
     [using \labusing specifier\rab] [axes \labaxis specifier\rab]
     [select \labselect specifier\rab]
     [index \labindex specifier\rab]
     [every \labevery specifier\rab]
     [with \labstyle\rab [\labstyle modifier\rab ... ] ]

The plot command is the main workhorse command of PyXPlot, which is used to produce all plots. For example to plot the sine function: 

plot sin(x)

Ranges for the axes of a graph can be specified by placing them in square-brackets before the name of the function to be plotted. An example of this syntax would be: 

plot [-pi:pi] sin(x)

which would plot the function sin(x) between -pi and pi. Data files may also be plotted as well as functions, in which case the filename of the data file to be plotted should be enclosed in apostrophes. An example of this syntax would be: 

plot 'data.dat' with points

which would plot the file called `data.dat'. Multiple datasets can be plotted on a single graph by listing them with commas separating them: 

plot sin(x) with colour blue, cos(x) with linetype 2


   <axes>

In plots which have multiple parallel axes - for example, an x-axis along its lower edge and an x2-axis along its upper edge - the pair of axes against which data should be plotted should be specified using the modifier axes following the name of the function or data file to be plotted, for example: 

plot sin(x) axes x2y1

   </axes>
   <with>

The style in which data should be plotted may be specified following the modifier with, with the following syntax: 

plot sin(x) with points

 The following plot styles are recognised: lines, points, linespoints, dots, boxes, wboxes, impulses, steps, histeps, fsteps, xerrorbars, yerrorbars, xyerrorbars, xerrorrange, yerrorrange, xyerrorrange, arrows_head, arrows_nohead, arrows_twohead, csplines, acsplines. In addition, lp and pl are recognised as abbreviations for linespoints; errorbars is recognised as an abbreviation for yerrorbars; errorrange is recognised as an abbreviation for yerrorrange; and arrows_twoway is recognised as an alternative for arrows_twohead. As well as plot styles, the with modifier can also be followed by the following keywords: 

linetype - specifies the linetype (e.g. dotted) used by the lines plot style.  \\
linewidth - specifies the width of line, in pt, used by the lines plot style.  \\
pointsize - specifies the size of data points, relative to the default size, used by the points plot style.  \\
pointlinewidth - as above, but specifies the linewidth, in pt, used to render the crosses, circles, etc, used to mark data points.  \\
linestyle - this can be used in conjunction with the set linestyle command to save default plot styles.  \\
colour - specifies the colour used to plot the dataset, either by one of the recognised colour names or by an integer, to use one from the current palette.  \\
fillcolour - relavant to the boxes and wboxes plot styles, specifies a colour with which bar charts should be filled.  \\

An example using several of these keywords would be: 

plot sin(x) axes x2y1 with colour blue linetype 2 \
                           linewidth 5

   </with>

  </plot>
  <print>

print \labexpression\rab

The print command outputs the value of a mathematical expression to the terminal. It is most often used to find the value of a variable, though it can also be used to produce formatted output from a PyXPlot script. For example: 

print a

would print the value of the variable a. 

  </print>
  <pwd>

pwd

The pwd command prints the location of the current working directory. 

  </pwd>
  <quit>

quit

The exit command can be used to exit PyXPlot. See exit for more details. 

  </quit>
  <refresh>

refresh

The refresh command produces an exact copy of the latest display. This can be useful, for example, after changing the terminal type, to produce a second copy of a plot in a different graphic format. It differs from the replot command in that it doesn't replot anything; use of the set command since the previous plot command has no affect on the output. The refresh command is also especially useful in the multiplot environment; it can be used to produce second copies of multiplot pages where there need not necessarily even be any plots; there might perhaps only be textual items and arrows. 

  </refresh>
  <replot>

replot [\labplot number\rab]

In single plot mode, the replot command causes the most recent plot command to be re-run. This can be useful to replot a data file which has changed in the meantime, but also to change some aspect of a plot within PyXPlot itself. Usages of the set command between the original plot command and the calling of the replot command are applied to the new plot. For example: 

plot sin(x)
set textcolour red
replot

In multiplot mode, the replot command acts by default upon the last plot item which was added to the multiplot page, and causes that to be replotted. It is possible to change this behaviour by first calling the edit command, in which case any given plot within a multiplot can be modified and replotted. Specifying a function or data file after the replot command causes that function or data file to be added to the plot. The syntax here is the same as for the plot command. For example: 

replot sin(x) axes x2y1 with linespoints

will add a plot of the function sin(x) to the current plot. 

  </replot>
  <reset>

reset

The reset command returns the values of all settings that have been changed with the set command back to their default values. 

  </reset>
  <save>

save '\labfilename\rab'

The save command saves a list of all of the commands which have been executed in the current interactive PyXPlot session into a given file. The filename of the desired location for this file should be placed in quotes, for example: 

save 'foo'

would save a command history into the file named `foo'. 

  </save>
  <set>

set \laboption\rab \labvalue\rab

The set command sets the value of various operational parameters within PyXPlot. For example: 

set pointsize 2

would sets the default point size to 2. The basic syntax always follows that above: the set command should be followed by some keyword specifying which setting it is which should be set. If a further parameter is needed to specify what value to set this setting to, it should follow this keyword. Settings which work in an on/off fashion tend to take a syntax along the lines of: 

set key###|#Set option ON#\\
set nokey#|#Set option OFF

More details of the functions of each individual setting can be found in the subsections below, which forms a complete list of the recognised setting keywords. The reader should also see the show command, which can be used to display the current values of settings, and the unset command, which returns settings to their default values. 
   <arrow>

set arrow \labarrow number\rab from [\labco-ordinate\rab] \labx\rab,
          [\labco-ordinate\rab] \laby\rab to [\labco-ordinate\rab] \labx\rab,
          [\labco-ordinate\rab] \laby\rab [with \labmodifier\rab ]



\labco-ordinate\rab = ( first | second | screen | graph |
                  axis\labaxisnumber\rab                  )

The set arrow command causes an arrow to be added to a plot. An example of its syntax would be: 

set arrow 1 from 0,0 to 1,1

which would cause an arrow to be drawn between the points 0,0 and 1,1, as measured on the x and y axes. The tag `1' immediately following the arrow keyword is an identification number, and allows the arrow to be removed later with the unset arrow command. By default the co-ordinates are measured relative to the first x- and y-axes, but can be specified in a range of coordinate systems. These are specified as follows: 

set arrow 1 from first 0, second 0 to axis3 1, axis4 1

As can be seen, the name of the desired coordinate system precedes the position value in that coordinate system. The coordinate system first, the default, measures the graph using the x- and y-axes. second uses the x2- and y2-axes. screen and graph both measure in centimetres from the origin of the graph. The syntax axisn may also be used, to use the n th x- or y-axis; for example, axis3 above. The set arrow command can be followed by the keyword `with', to specify the style of the arrow. For example, the specifiers `nohead', `head' and `twohead', after the keyword `with', can be used to make arrows with no arrow heads, normal arrow heads, or two arrow heads. `twoway' is an alias for `twohead'. Normal line type modifiers can also be used here. For example: 

set arrow 2 from first 0, second 2.5 to axis3 0,
             axis4 2.5 with colour blue nohead

   </arrow>
   <autoscale>

set autoscale \labaxis\rab[\labaxis\rab... ] 

The autoscale setting causes PyXPlot to choose the scaling for an axis automatically based on the data and/or functions to be plotted against it. As an example of the syntax: 

set autoscale x1

would cause the size of the first x-axis to be scaled to fit the data. Multiple axes can be specified, viz.: 

set autoscale x1y3

Note that ranges explicitly specified in a plot command will override the autoscale setting. 

   </autoscale>
   <axescolour>

set axescolour \labcolour\rab

The axescolour setting changes the colour of the plot's axes. For example: 

set axescolour blue

changes the axes to be blue.

   </axescolour>
   <axis>

set axis \labaxis\rab, ...

The command: 

set axis x2

may be used to add a second x-axis to a plot, with default settings. In general, there is no practical reason to use this command, as a second x-axis would implicitly be created anyway by any of the following statements: 

set x2label 'foo' \\
set x2ticdir outwards \\
plot sin(x) axes x2y1

Of more practical use is the `unset x2' command, which is used to remove an axis once it has been added to a plot. After executing: 

set x2label 'foo'

for example, the only way to tell PyXPlot to subsequently produce a plot without a second x-axis would be to delete this axis with the following command: 

unset axis x2

Note that in this case, the unset x2label command would be sufficient to remove the label `foo' placed on the new axis, but not sufficient to delete the new axis that the set x2label command implicitly created. Multiple axes can be deleted in a single unset axis statement, for example: 

unset axis x2x4x5

In the special cases of unset axis x1 or unset axis y1, these axes cannot be deleted; a plot must have at least one x- and one y-axis. Instead, the unset axis command restores these axes to their default configurations, removing any set titles or ranges that they might have been given. 

   </axis>
   <backup>

set backup

The setting backup changes PyXPlot's behaviour when it detects that a file which it is about to write is going to overwrite an existing file. Whereas by default the existing file would be overwritten by the new one, when the backup setting is turned on, it is renamed, placing a tilde at the end of its filename. For example, suppose that a plot were to be written with filename `out.ps', but such a file already existed. With the backup setting turned on the existing file would be renamed `out.ps~' to save it from being overwritten. The setting may be turned off via set nobackup. 

   </backup>
   <bar>

set bar ( large | small | \labbarsize\rab )

The bar setting changes the size of the bar on the end of the errorbars, relative to the current pointsize. For example: 

set bar 2

sets the bars to be twice the size of the points. The options `large' and `small' are equivalent to 1 (the default) and 0 (no bar) respectively. 

   </bar>
   <binorigin>

set binorigin \labbin origin\rab

The binorigin setting changes the position on the x axis where the bins used by the histogram command originate from. 

   </binorigin>
   <binwidth>

set binwidth \labbin width\rab

The binwidth setting changes the width of the bins used by the histogram command. 

   </binwidth>
   <boxfrom>

set boxfrom \labvalue\rab

The `boxfrom' setting alters PyXPlot's behaviour when plotting bar charts. It changes the horizontal line (vertical point; y-axis value) from which the boxes of bar charts appear to emanate. The default value is zero (i.e. boxes extend from the line of the y-axis). An example of its syntax would be: 

set boxfrom 2

which would make the boxes of a barchart emanate vertically from the line y=2. 

   </boxfrom>
   <boxwidth>

set boxwidth \labwidth\rab

The `boxwidth' setting alters PyXPlot's behaviour when plotting bar charts. It sets the default width of the boxes used, in graph x-axis units. If the specified width is negative then, as happens by default, the boxes have automatically selected widths, such that the interfaces between them occur at the horizontal midpoints between their specified x-positions. For example: 

set boxwidth 2

would set all boxes to be two units wide. 

set boxwidth -2

would set all of the bars to have differing widths, centred upon their specified x-positions, such that their interfaces occur at the horizontal midpoints between them. 

   </boxwidth>
   <data_style>

See `set style data'. 

   </data_style>
   <display>

set [no]display

By default, whenever an item is added to a multiplot, or an existing item moved or replotted, the whole multiplot is replotted to show the change. This can be a time consuming process on large and complex multiplots. For this reason, the `set nodisplay' command is provided, which stops PyXPlot from producing any output. The `set display' command can subsequently be issued to return to normal behaviour. This can be especially useful in scripts which produce large multiplots. There is no point in producing output at each step in the construction of a large multiplot, and so a great speed increase can be achieved by wrapping the script with: 

set nodisplay 
[...prepare large multiplot...] 
set display 
refresh

   </display>
   <dpi>

set dpi \labvalue\rab

When PyXPlot is set to produce bitmapped graphics output, using the gif, jpg or png terminals (see the `set terminal' command), the `dpi' setting changes how many dots per inch these graphics files are produced with. That is to say, it changes the image resolution of these file formats: 

set dpi 100

sets the output to a resolution of 100 dots per inch. Higher dpi values yield better quality images, but larger file sizes. 

   </dpi>
   <fontsize>

set fontsize \labvalue\rab

The fontsize setting changes the size of the fount[*] used to render all text labels which appear on a plot, including keys, axis labels, etc. The value specified should be an integer in the range -4 to 5, corresponding to LaTeX's tiny (-4) and Huge (5) sizes, for example: 

set fontsize 2

The default value is zero, LaTeX's normal fount size. As an alternative, fount sizes can be specified directly in the LaTeX text of labels, for example: 

set xlabel '\Large This is a BIG label'

* -- This is not a spelling mistake. `font', by contrast, would be a spelling mistake. See the Oxford English Dictionary.

   </fontsize>
   <function_style>

See `set style function'. 

   </function_style>
   <grid>

set [no]grid \labaxis\rab ...

The grid setting controls whether a grid is placed behind a plot or not. Issuing the command: 

set grid

would cause a grid to be drawn with its gridlines connecting to the ticks of the first x- and y-axes. Conversely, issuing: 

set nogrid

would remove from the plot all gridlines associated with the ticks of any axes. One or more axes can be specified for the set grid command; a grid will then be drawn to connect with the ticks of these axes. An example of this syntax would be: 

set grid x1 y3

which would cause gridlines to be drawn from ticks of the first x- and third y-axes. It is possible, though not always aesthetically very pleasing, to draw gridlines from multiple parallel axes, for example: 

set grid x1x2x3

   </grid>
   <gridmajcolour>

set gridmajcolour \labcolour\rab

The `gridmajcolour' setting changes the colour that is used to plot the gridlines (see the set grid command) which are associated with the major ticks of axes (i.e. major gridlines). For example: 

set gridmajcolour purple

would cause the major grid lines to be drawn in purple. See also the set gridmincolour command. 

   </gridmajcolour>
   <gridmincolour>

set gridmincolour \labcolour\rab

The gridmincolour setting changes the colour that is used to plot the gridlines (see the set grid command) which are associated with the minor ticks of axes (i.e. minor gridlines). For example: 

set gridmincolour purple

would cause the minor grid lines to be drawn in purple. 

See also the set gridmajcolour command.

   </gridmincolour>
   <key>

set key [ \labposition\rab ... ] [\labxoffset\rab, \labyoffset\rab]

The setting `key' determines whether a legend is placed on a plot, and if so, where it should be located on the plot. Issuing the command: 

set key

simply causes a legend to be added to the plot in its default position, usually the plot's upper-right corner. The converse action is achieved by: 

set nokey

or: 

unset key

both of which cause a plot to have no legend. A position for the key may also be specified after the set key command, for example: 

set key bottom left

Recognised positions are `top', `bottom', `left', `right', `below', `above', `outside', `xcentre' and `ycentre'. In addition, if none of these quite achieved the desired result, a positional offset may be specified after one of the position keywords above. The first value is assumed to be an x-offset, and the second a y-offset, in centimetres. For example: 

set key bottom left 0.0, -0.5

would display a key below the bottom left corner of the graph. 

   </key>
   <keycolumns>

set keycolumns \labvalue\rab

The `keycolumns' settings sets how many columns the legend of a plot should be arranged into. By default, all of the entries in the legends of plots are arranged in a single vertical list. However, for plots with very large number of datasets, it may be preferably to split this list into several columns. The set keycolumns command can be followed by any positive integer, for example: 

set keycolumns 3

   </keycolumns>
   <label>

set label \lablabel number\rab '\labtext\rab' [\labco-ordinate\rab] \labx\rab,
                                  [\labco-ordinate\rab] \laby\rab
                                  [rotate \labangle\rab]
                                  [with colour \labcolour\rab]



\labco-ordinate\rab = ( first | second | screen | graph |
                  axis\labaxisnumber\rab                  )

The set label command can be used to place text labels onto a plot. For example: 

set label 1 'Hello' 0, 0

would place the word `Hello' at plot co-ordinates (0,0), as measured on the x- and y-axes. The tag `1' immediately following the `label' keyword is an identification number, and allows the label to be removed later with the unset label command. By default the position coordinates of the label are measured relative to the first x- and y-axes, but can be specified in a range of coordinate systems. These are specified as follows: 

set label 1 'Hello' first 0, second 0

As can be seen, the name of the desired coordinate system precedes the position value in that coordinate system. Following Gnuplot's nomenclature, the coordinate system first the default, measures the graph using the x- and y-axes. second uses the x2- and y2-axes. screen and graph both measure in centimetres from the origin of the graph. The syntax axisn may also be used, to use the n th x- or y-axis; for example, axis3: 

set label 1 'Hello' axis3 1, axis4 1

A rotation angle may optionally be specified after the keyword `rotate' to produce text rotated to any arbitrary angle, measured in degrees counter-clockwise. The following example would produce upward-running text: 

set label 1 'Hello' 1.2, 2.5 rotate 90

By default the labels are black; however, an arbitrary colour may be specified using the `with colour' modifier. For example: 

set label 3 'A purple label' 0, 0 with colour purple

will place a purple label at the origin. 

   </label>
   <linestyle>

set linestyle \labstyle number\rab \labstyle specifier\rab ...

At times, the string of style keywords following the `with' modifier in plot commands can grow rather unwieldily long. For clarity, frequently used plot styles can be stored as linestyles; this is true of styles involving points as well as lines. The syntax for setting a linestyle is: 

set linestyle 2 points pointtype 3

where the `2' is the identification number of the linestyle. In a subsequent plot statement, this linestyle can be recalled as follows: 

plot sin(x) with linestyle 2

   </linestyle>
   <linewidth>

set linewidth \labvalue\rab

Sets the default linewidth, in units of pt, of the lines used to plot datasets onto graphs with the `lines' plot style. For example in the following statement: 

set linewidth 3
plot sin(x) with lines

lines of three times the fefault thickness are plotted. The set linewidth setting only affects plot statements where no linewidth is manually specified. 

   </linewidth>
   <logscale>

set logscale [\labaxis\rab ... ] [\labbase\rab]

The `logscale' setting causes an axis to be laid out with logarithmically, rather than linearly, spaced intervals. For example, issuing the command: 

set log

would cause all of the axes of a plot to be scaled logarithmically. Alternatively only one, or a selection of axes, can be set to scale logarithmically as follows: 

set log x1 y2

This would cause the first x- and second y-axes to be scaled logarithmically. Linear scaling can be restored to all axes via: 

set nolog

or: 

unset log

and to only one, or a selection of axes, via: 

set nolog x1 y2

or: 

unset log x1y2

Optionally, a base may be specified at the end of the set logscale command, to produce axes labelled in logarithms of arbitrary bases. The default base is 10. 

   </logscale>
   <multiplot>

set multiplot

Issuing the command: 

set multiplot

causes PyXPlot to enter multiplot mode, which allows many graphs to be plotted together and displayed side-by-side.

   </multiplot>
   <mxtics>

See set xtics. 

   </mxtics>
   <mytics>

See set xtics. 

   </mytics>
   <noarrow>

set noarrow [\labarrow number\rab]

Issuing the command: 

set noarrow

removes all arrows produced with the set arrow command from the current plot. Alternatively, individual arrows can be removed using the syntax: 

set noarrow 2

where the tag `2' here is the identification number given to the arrow to be removed when it was initially specified with the set arrow command. 

   </noarrow>
   <noaxis>

set noaxis \labaxis specification\rab, ...

The set noaxis command is equivalent to the unset axis command. It should be followed by a comma-separated lists of axes, which are to be removed from the current axis configuration. 

   </noaxis>
   <nobackup>

See backup. 

   </nobackup>
   <nodisplay>

See display. 

   </nodisplay>
   <nogrid>

set nogrid [\labaxis\rab ... ]

Issuing the command set nogrid removes gridlines from the current plot. On its own, the command removes all gridlines from the plot, but alternatively, those gridlines connected to the ticks of certain axes can selectively be removed. The syntax for doing this is as follows: 

set nogrid x1 y2

   </nogrid>
   <nokey>

set nokey

Issuing the command set nokey causes plots to be generated with no legend. See the command set key for more details. 

   </nokey>
   <nolabel>

set nolabel [\lablabel number\rab ... ]

Issuing the command: 

set nolabel

removes all text labels, as set using the set label command, from the current plot. Alternatively, individual labels can be removed using the syntax: 

set nolabel 2

where the tag `2' here is the identification number given to the label to be removed when it was initially set using the set label command. 

   </nolabel>
   <nolinestyle>

set nolinestyle \labstyle number\rab

The nolinestyle setting deletes a line style. For example, the command: 

set nolinestyle 3

would delete the third linestyle, if defined. See the command set linestyle for more details. 

   </nolinestyle>
   <nologscale>

set nologscale [\labaxis\rab ... ]

The logscale setting causes an axis to be laid out with logarithmically, rather than linearly, spaced intervals. Conversely, the nologscale setting is used to restore linear scaling. For example, issuing the command: 

set nolog 

would cause all of the axes of a plot to be scaled linearly. Alternatively only one, or a selection of axes, can be set to scale linearly as follows: 

set nologscale x1 y2

This would cause the first x- and second y-axes to be scaled linearly. 

   </nologscale>
   <nomultiplot>

set nomultiplot

Issuing the command set nomultiplot places PyXPlot into single plotting mode. See above for a detailed discussion of PyXPlot's multiplot and single plot modes. Broadly speaking, single plot mode is used to produce single graphs on their own; multiplot mode is used to produce galleries of many plots side-by-side. 

   </nomultiplot>
   <notitle>

set notitle

Issuing the command set notitle will cause graphs to be produced with no title at the top. 

   </notitle>
   <noxtics>

set no\labaxis specification\rabtics

This command causes graphs to be produced with no tick marks along their x-axes. 

   </noxtics>
   <noytics>

See set noxtics. 

   </noytics>
   <origin>

set origin \labx\rab, \laby\rab

The `origin' setting controls the default location of graphs on a multiplot. For example, the command: 

set origin 3,5

would cause the next graph to be plotted at position (3,5) centimetres on the multiplot page. The set origin command is of little use outside multiplot mode. 

   </origin>
   <output>

set output '\labfilename\rab'

The output setting controls the name of the file that is produced for non-interactive terminals (postscript, eps, jpeg, gif and png). For example: 

set output 'myplot.eps'

causes the output to be written to the file `myplot.eps'. 

   </output>
   <palette>

set palette \labcolour\rab, [\labcolour\rab ... ]

PyXPlot has a palette of colours which it assigns sequentially to datasets when colours are not manually assigned. This is also the palette to which is referred if the user issues a command such as: 

plot sin(x) with colour 5

requesting the fifth colour from the palette. By default, this palette contains a range of distinctive colours, however the user can choose to substitute his own list of colours using the set palette command. It should be followed by a comma-separated list of colour names, for example: 

set palette red,green,blue

If, after issuing this command, the following plot statement were to be executed: 

plot sin(x), cos(x), tan(x), exp(x)

the first function would be plotted in red, the second in green, and the third in blue. Upon reaching the fourth, the palette would cycle back to red. 

   </palette>
   <papersize>

set papersize ( size | \labheight\rab,\labwidth\rab )

The papersize option sets the size of output produced by the postscript terminal. This can take the form of either a recognised papersize name - a list of these is given below - or a height, width pair of values, both measured in millimetres. For example: 

set papersize a4
set papersize letter
set papersize 200,100

The following named papersizes are recognised:

|###########################2a0###1681###1189
|###########################4a0###2378###1681
|############################a0###1189####840
|############################a1####840####594
|###########################a10#####37#####26
|############################a2####594####420
|############################a3####420####297
|############################a4####297####210
|############################a5####210####148
|############################a6####148####105
|############################a7####105#####74
|############################a8#####74#####52
|############################a9#####52#####37
|############################b0###1414####999
|############################b1####999####707
|###########################b10#####44#####31
|############################b2####707####499
|############################b3####499####353
|############################b4####353####249
|############################b5####249####176
|############################b6####176####124
|############################b7####124#####88
|############################b8#####88#####62
|############################b9#####62#####44
|############################c0###1296####917
|############################c1####917####648
|###########################c10#####40#####28
|############################c2####648####458
|############################c3####458####324
|############################c4####324####229
|############################c5####229####162
|############################c6####162####114
|############################c7####114#####81
|############################c8#####81#####57
|############################c9#####57#####40
|#########################crown####508####381
|##########################demy####572####445
|###################double_demy####889####597
|######################elephant####711####584
|###################envelope_dl####110####220
|#####################executive####267####184
|######################foolscap####330####203
|#############government_letter####267####203
|####international_businesscard#####85#####53
|###################japanese_b0###1435###1015
|###################japanese_b1###1015####717
|##################japanese_b10#####44#####31
|###################japanese_b2####717####507
|###################japanese_b3####507####358
|###################japanese_b4####358####253
|###################japanese_b5####253####179
|###################japanese_b6####179####126
|###################japanese_b7####126#####89
|###################japanese_b8#####89#####63
|###################japanese_b9#####63#####44
|################japanese_kiku4####306####227
|################japanese_kiku5####227####151
|#############japanese_shiroku4####379####264
|#############japanese_shiroku5####262####189
|#############japanese_shiroku6####188####127
|####################large_post####533####419
|########################ledger####432####279
|#########################legal####356####216
|########################letter####279####216
|########################medium####584####457
|#######################monarch####267####184
|##########################post####489####394
|#####################quad_demy###1143####889
|########################quarto####254####203
|#########################royal####635####508
|#####################statement####216####140
|####################swedish_d0###1542###1090
|####################swedish_d1###1090####771
|###################swedish_d10#####48#####34
|####################swedish_d2####771####545
|####################swedish_d3####545####385
|####################swedish_d4####385####272
|####################swedish_d5####272####192
|####################swedish_d6####192####136
|####################swedish_d7####136#####96
|####################swedish_d8#####96#####68
|####################swedish_d9#####68#####48
|####################swedish_e0###1241####878
|####################swedish_e1####878####620
|###################swedish_e10#####38#####27
|####################swedish_e2####620####439
|####################swedish_e3####439####310
|####################swedish_e4####310####219
|####################swedish_e5####219####155
|####################swedish_e6####155####109
|####################swedish_e7####109#####77
|####################swedish_e8#####77#####54
|####################swedish_e9#####54#####38
|####################swedish_f0###1476###1044
|####################swedish_f1###1044####738
|###################swedish_f10#####46#####32
|####################swedish_f2####738####522
|####################swedish_f3####522####369
|####################swedish_f4####369####261
|####################swedish_f5####261####184
|####################swedish_f6####184####130
|####################swedish_f7####130#####92
|####################swedish_f8#####92#####65
|####################swedish_f9#####65#####46
|####################swedish_g0###1354####957
|####################swedish_g1####957####677
|###################swedish_g10#####42#####29
|####################swedish_g2####677####478
|####################swedish_g3####478####338
|####################swedish_g4####338####239
|####################swedish_g5####239####169
|####################swedish_g6####169####119
|####################swedish_g7####119#####84
|####################swedish_g8#####84#####59
|####################swedish_g9#####59#####42
|####################swedish_h0###1610###1138
|####################swedish_h1###1138####805
|###################swedish_h10#####50#####35
|####################swedish_h2####805####569
|####################swedish_h3####569####402
|####################swedish_h4####402####284
|####################swedish_h5####284####201
|####################swedish_h6####201####142
|####################swedish_h7####142####100
|####################swedish_h8####100#####71
|####################swedish_h9#####71#####50
|#######################tabloid####432####279
|###############us_businesscard#####89#####51

   </papersize>
   <pointlinewidth>

set pointlinewidth \labvalue\rab

The `pointlinewidth' setting changes the width of the lines that are used to plot data points. For instance: 

set pointlinewidth 20

would cause points to be plotted with lines 20 times the default thickness. Note that `pointlinewidth' can be abbreviated as `plw'. 

   </pointlinewidth>
   <pointsize>

set pointsize \labvalue\rab

The `pointsize' setting changes the size at which points are plotted relative to their default size. It should be followed by a single value, the relative size, which can be any positive number. For example: 

set pointsize 1.5

would cause points to be plotted 1.5 times the default size. 

   </pointsize>
   <preamble>

set preamble \labtext\rab

The preamble setting changes the preamble that is prepended to each item of text rendered using LaTeX. This allows, for example, different packages to be loaded by default and user-defined macros to be set up. 

   </preamble>
   <samples>

set samples \labvalue\rab

The samples setting determines the number of values along the x-axis at which functions are evaluated when they are plotted. For example: 

set samples 100

causes 100 points to be evaluated. Increasing this value will cause functions to be plotted more smoothly, but also more slowly, and the postscript files generated will also be larger. When functions are plotted with the points plot style, this setting controls the number of points plotted. 

   </samples>
   <size>

set size (\labwidth\rab|ratio \labratio\rab|noratio|square)

The setting size is deprecated; use set width instead. It sets the width of the plot in centimetres. However, the command set size, when followed by the keyword ratio, is still used to set the aspect ratio of plots. See the `ratio' setting below for details. 

    <noratio>

set size noratio

Running: 

set size noratio

resets PyXPlot to produce plots with its default aspect ratio, which is the golden section. Other aspect ratios can be set with the set size ratio command. 

    </noratio>
    <ratio>

set size ratio \labratio\rab

This command sets the aspect ratio of plots produced by PyXPlot. The height of resulting plots will equal the plot width, as set by the set width command, multiplied by this aspect ratio. For example: 

set size ratio 2.0

would cause PyXPlot to produce plots that are twice as high as they are wide. The default aspect ratio which PyXPlot uses is a golden ratio of 2/(1+sqrt5). 

    </ratio>
    <square>

set size square

The command: 

set size square

sets PyXPlot to produce square plots, i.e. with unit aspect ratio. Other aspect ratios can be set with the set size ratio command. 

    </square>

   </size>
   <style>

set style { data | function } \labstyle modifier\rab ...

The set style data command affects the default style that data from a file is plotted with. Likewise the set style function command changes the default style that functions are plotted with. Any valid style modifier can be used. For example: 

set style data points
set style function lines linestyle 1

would cause data files to be plotted by default using points and functions using lines with the first defined linestyle. 

   </style>
   <terminal>

set terminal \labterminal type\rab [\laboption\rab ... ]

Syntax: 

set terminal { X11_singlewindow | X11_multiwindow | X11_persist | 
               postscript | eps | pdf | gif | png | jpg } 
             { colour | color | monochrome } 
             { portrait | landscape } 
             { invert | noinvert } 
             { transparent | solid }
             { enlarge | noenlarge }

The set terminal command controls the graphic format in which PyXPlot should output plots, for example setting whether it should output plots to files or display them in a window on the screen. Various options can also be set within many of the graphic formats which PyXPlot supports using this command. The following graphic formats are supported: X11_singlewindow, X11_multiwindow, X11_persist, postscript, eps, pdf, gif, jpeg, png. To select one of these formats, simply type the name of the desired format after the set terminal command. To obtain more details on each, see the subtopics below. The following settings, which can also be typed following the set terminal command, are used to change the options within some of these graphic formats: colour, monochrome, enhanced, noenhanced, portrait, landscape, invert, noinvert, transparent, solid, enlarge, noenlarge. Details of each of these can be found below. 
    <colour>

The colour terminal option causes plots to be produced in colour; this is the default behaviour. 

    </colour>
    <color>

The color terminal option is provided for the convenience of users unable to spell colour. 

    </color>
    <enlarge>

The enlarge terminal option causes the complete plot to be enlarged or shrunk to fit the current paper size. 

    </enlarge>
    <eps>

Sends output to eps files. The filename to which output is to be sent should be set using the set output command; the default is `pyxplot.eps'. This terminal produces encapsulated postscript suitable for including in, for example, LaTeXdocuments. 

    </eps>
    <gif>

The gif terminal renders output as gif files. The filename to which output is to be sent should be set using the set output command; the default is pyxplot.gif. The number of dots per inch used can be changed using the dpi option; the filename using set output. Transparent gifs can be produced with the transparent option. Also of relevance is the invert option for producing gifs with inverted colours. 

    </gif>
    <invert>

The invert terminal option causes the bitmap terminals (gif, jpeg, png) to produce output with inverted colours. This is useful for producing plots for slideshows, where bright colours on a dark background may be desired. 

    </invert>
    <jpeg>

The jpeg terminal renders output as jpeg files. The filename to which output is to be sent should be set using the set output command; the default is pyxplot.jpg. The number of dots per inch used can be changed using the dpi option. Of relevance is the invert option for producing jpegs with inverted colours. 

    </jpeg>
    <landscape>

The landscape terminal option causes PyXPlot's output to be displayed in rotated orientation. This is useful for printing as you get more on your sheet of paper that way around; probably less useful for plotting things on screen. 

    </landscape>
    <monochrome>

The monochrome terminal option causes plots to be rendered in black and white; by default, different dash styles are used to differentiate between lines on plots with several datasets. 

    </monochrome>
    <noenlarge>

The noenlarge terminal option causes the output not to be scaled (the opposite of enlarge above). 

    </noenlarge>
    <noinvert>

The noinvert terminal option causes the bitmap terminals (gif, jpeg, png) to produce normal output without inverted colours. The converse of inverse. 

    </noinvert>
    <pdf>

The pdf terminal options causes pdf format output files to be produced. 

    </pdf>
    <png>

The png terminal renders output as png files. The filename to which output is to be sent should be set using the set output command; the default is pyxplot.png. The number of dots per inch used can be changed using the dpi option; the filename using set output. Transparent pngs can be produced with the transparent option. Also of relevance is the invert option for producing pngs with inverted colours. 

    </png>
    <portrait>

The portrait terminal option causes PyXPlot's output to be displayed in upright (normal) orientation. 

    </portrait>
    <postscript>

Sends output to postscript files. The filename to which output is to be sent should be set using the set output command; the default is pyxplot.ps. This terminal produces non-encapsulated postscript suitable for sending directly to a printer. 

    </postscript>
    <solid>

The solid option causes the gif and png terminals to produce output with a non-transparent background, the converse of transparent. 

    </solid>
    <transparent>

The transparent terminal option causes the gif and png terminals to produce output with a transparent background. 

    </transparent>
    <X11_multiwindow>

Displays plots on the screen (in X11 windows, using Ghostview). Each time a new plot is generated it appears in a new window, and the old plots remain visible. As many plots as may be desired can be left on the desktop simultaneously. 

    </X11_multiwindow>
    <X11_persist>

Displays plots on the screen in X11 windows, using Ghostview. Each time a new plot is generated it appears in a new window, and the old plots remain visible. When PyXPlot is exited the windows remain in place until they are closed manually. 

    </X11_persist>
    <X11_singlewindow>

Displays plots on the screen (in X11 windows, using Ghostview). Each time a new plot is generated it replaces the old one, preventing the desktop from becoming flooded with old plots. This terminal is the default when running interactively. 

    </X11_singlewindow>

   </terminal>
   <textcolour>

set textcolour \labcolour\rab

The `textcolour' setting changes the colour of all text displayed on a plot. For example: 

set textcolour red

causes all text labels, including the labels on graph axes and legends, etc. to be rendered in red.

   </textcolour>
   <texthalign>

set texthalign ( left | centre | right )

The `texthalign' setting controls how text labels, placed on plots using the set label command, and upon multiplots using the text command, are justified horizontally with respect to their specified positions. Three options are available: 

set texthalign left
set texthalign centre
set texthalign right

   </texthalign>
   <textvalign>

set textvalign ( bottom | centre | top )

The `textvalign' setting controls how text labels, placed on plots using the set label command, and upon multiplots using the text command, are justified vertically with respect to their specified positions. Three options are available: 

set textvalign bottom 
set textvalign centre
set textvalign top

   </textvalign>
   <title>

set title '\labtitle\rab'

The `title' setting can be used to set a title for a plot, to be displayed above it. For example, the command: 

set title 'foo'

would cause a title `foo' to be displayed above a graph. The easiest way to remove a title, having set one, is via: 

unset title

   </title>
   <width>

set width \labvalue\rab

The width setting controls the size of a graph. For example: 

set width 10

sets output to be 10 centimetres in width. For the bitmap terminals (gif, jpg and png) this setting, in conjunction with the dpi setting, controls the number of pixels across the final image. 

   </width>
   <xlabel>

set xlabel '\labtext\rab'

The xlabel setting controls the label placed on the x-axis (abscissa). For example: 

set xlabel '$x$'

sets the label on the x-axis to `x'. Labels can be placed on higher axes by inserting their number after the `x', for example: 

set x10label 'foo'

would label the tenth x axis. Similarly, labels can be placed on y-axes as follows: 

set ylabel '$y$' 
set y2label 'foo'

   </xlabel>
   <xrange>

set x[\labaxisnumber\rab]range '\labtext\rab'

The xrange setting controls the range of values along the x-axes of plots. For function plots, this is also the domain across which the function will be evaluated. For example: 

set xrange [0:10]

sets the first x axis to be between 0 and 10. Higher numbered axes may be referred to be inserting their number after the x; y-axes similarly be replacing the x with a y. Hence: 

set y23range [-5:5]

sets the range of the 23rd y-axis to be between -5 and 5. To request a range to be automatically scaled an asterix can be used. The following command: 

set xrange [:10][*:*]

would set the x-axis to have an upper limit of 10, but does not affect the lower limit; its range remains at its previous setting. The first y-axis is automatically scaled on both its upper and lower limits. 

   </xrange>
   <xticdir>

set (x|y)[\labaxisnumber\rab]ticdir (inward|outward|both)

The `xticdir' setting can be used to set whether the ticks along the x-axis of a plot point inwards, towards the graph, as by default, or outwards, towards the numeric labels along the axis. They can also be set to point in both directions simultaneously. The syntax for this is as follows: 

set xticdir inward 
set xticdir outward 
set xticdir both

The same setting can also be made on higher numbered axes, by inserting their numbers after the `x', for example: 

set x10ticdir outward

Similarly, the `x' can be substituted with a `y' to set the directions of ticks on vertical axes: 

set yticdir inward
set y10ticdir both

   </xticdir>
   <xtics>

set [m]x[\labaxisnumber\rab]tics 
         [axis|border|inward|outward|both] 
         [auto 
          | [\labminimum\rab,] \labincrement[, \labmaximum\rab] 
          | ( '\lablabel\rab' \labposition\rab ... ) 
         ] 

The xtics option specifies the positions of tick marks on the x-axis (similarly, ytics acts on the y-axis). One can specify: 

* The axis to modify; if none is specified, then the command acts upon all axes.  \\
* mxtics to alter the placement of minor tic marks.  \\
* The keywords inward, outward and both, which alter the directions of the tics. axis is an alias for inward, border for outward.  \\
* The autofreq keyword restores automatic placement of the tics  \\
* If minimum, increment, maximum are specified, then ticks are placed at evenly spaced intervals between the specified limits. In the case of logarithmic axes, increment is applied multiplicatively.  \\
* The final form allows ticks to be placed on an axis manually with individual labels.  \\

Two examples: 

set xtics 2 1 5

will set tick marks on the x-axis at positions 2, 3, 4 and 5. 

set x2tics ("a" 2, "b" 3)

will set tick marks on the second x-axis at positions 2 and 3 reading `a' and `b' respectively. 

   </xtics>
   <ylabel>

See xlabel. 

   </ylabel>
   <yrange>

See xrange. 

   </yrange>
   <yticdir>

See xticdir. 

   </yticdir>
   <ytics>

See xtics. 

   </ytics>

  </set>
  <show>

show ( all | settings | axes | variables | functions |
       \labparameter\rab ...                                 )

The show command displays the values of PyXPlot's internal parameters. For example: 

show pointsize

will display the current default point size. Details of the various settings that can be shown can be found under the set command; any keyword which can follow the set command can also follow the show command. In addition, show all shows the configuration state of all aspects of PyXPlot. The command show settings shows all of PyXPlot's settings, as distinct from variables, functions and axes. show axes shows the configuration of all of PyXPlot's axes. show variables lists all of the currently defined variables. And finally, show functions lists all of the current user-defined functions. 

  </show>
  <spline>

spline [\labrange specification\rab] \labfunction name\rab '\labfilename\rab' 
       [index \labindex specification\rab] [every \labevery specification\rab]
       [using \labusing specification\rab]

The spline command fits a spline to a data file. A special function is created that represents the spline fit and can be used in the same way as any other user-defined function. For example: 

spline f() 'data.1'

would create a function f(x) that is a fit to the data in the file data.1. By default, the spline command uses the first two columns of a data file in a manner analogous to the plot command. The index, every and using modifiers can be used in the same way as in the plot command to select which parts of the data file should be used; see the datafile section for more details. Note that trying to generate splines of multi-valued functions will not, in general, produce useful results. 

  </spline>
  <tabulate>

tabulate [\labrange specification\rab] ( \labexpression\rab | \labfilename\rab )
         [index \labindex specification\rab] [every \labevery specification\rab]
         [using \labusing specification\rab] [select \labselect specifier\rab]
         [with \laboutput format\rab]

The tabulate commands produces a text file containing the values of a function at a set of points. For example, to produce a data file called sine.dat with the principal values of the sine function: 

set output 'sine.dat'
tabulate [-pi:pi] sin(x)

The tabulate command can also be used to select portions of data files. For example, to select the third, sixth and ninth columns of the data file data.dat, but only when the arcsine of the value in the fourth column is positive: 

set output 'filtered.dat'
tabulate 'data.dat' u 3:6:9 select (asin($4)\rab0)

The format used in each column of the output file is chosen automatically with integers and small numbers treated intelligently to produce output which preserves accuracy, but is also easily human-readable. If desired, however, a format statement may be specified using the with format specifier. The syntax for this is similar to that expected by the Python string substitution operator (%). For example, to tabulate the values of x to very many significant figures one could use: 

tabulate x**2 with format "%27.20e"

If there are not enough columns present in the supplied format statement it will be repeated in a cyclic fashion; e.g. in the example above the single supplied format is used for both columns. The index, every, using and select modifiers work in the same way as for the plot command. For example multiple functions may be tabulated into the same file with the using modifier: 

tabulate [0:2*pi] sin(x):cos(x):tan(x) u 1:2:3:4

The samples setting can be used to control the number of points that are inserted into the data file. If the x-axis is set to be logarithmic then the points at which the functions are evaluated are spaced logarithmically.

  </tabulate>
  <text>

text '\labtext string\rab' [at \labx\rab, \laby\rab] [rotate \labangle\rab] [with colour \labcolour\rab]

The text command is used to add blocks of text to a multiplot. An example would be: 

text 'Hello World!' at 0,2

which would render the text `Hello World!' at position (0,2), measured in centimetres. The alignment of the text item with respect to this position can be set using the set texthalign and set textvalign commands. A rotation angle may optionally be specified after the keyword `rotate' to produce text rotated to any arbitrary angle, measured in degrees counter-clockwise. The following example would produce upward-running text: 

text 'Hello' at 1.5, 3.6 rotate 90

By default the text is black; however, an arbitrary colour may be specified using the `with colour' modifier. For example: 

text 'A purple label' at 0, 0 with colour purple

would add a purple label at the origin of the multiplot. Outside of multiplot mode, the text command can be used to produce images consisting simply of one single text item. This can be useful for importing LaTeXed equations as gif images into slideshow programs such as Microsoft Powerpoint which are incapable of producing such neat mathematical notation by themselves. 

  </text>
  <undelete>

undelete \labitem number\rab, ...

The undelete command is part of the multiplot environment; it can be used to reverse the effect of deleting a multiplot item with the delete command. The desired item to be undeleted should be identified using the reference number which it was given when it was created; it would have been displayed on the terminal at that time. For example: 

undelete 1

will cause the previously deleted item numbered 1 to reappear. 

  </undelete>
  <unset>

unset \labsetting\rab

The unset command causes a setting that has been changed using the set command to be returned to its default value. For example: 

unset linewidth

returns the linewidth to its default value. The list of keywords which can follow the unset command are essentially the same as those which can follow the set command.  

  </unset>

</commands>

</help>
